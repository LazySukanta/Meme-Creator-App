{"version":3,"sources":["Meme/styles.module.css","MemeGenerated/styles.module.css","Meme/Meme.js","MemeGenerated/MemeGenerated.js","App/App.js","index.js"],"names":["module","exports","Meme","useState","memes","setMemes","memeIndex","setMemeIndex","captions","setCaptions","history","useHistory","useEffect","fetch","then","res","json","_memes","data","array","i","length","j","Math","floor","random","temp","shuffleMemes","Array","box_count","fill","className","styles","container","onClick","currentMeme","formData","FormData","append","id","forEach","c","index","method","body","push","url","generate","skip","map","onChange","e","text","target","value","updateCaption","key","alt","src","MemeGenerated","copied","setCopied","clipboard","useClipboard","location","useLocation","URLSearchParams","search","get","home","copy","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,KAAO,qBAAqB,SAAW,2B,mBCA/FD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,KAAO,qBAAqB,KAAO,uB,4KCG9EC,EAAO,WAAO,IAAD,EAEEC,mBAAS,IAFX,mBAEjBC,EAFiB,KAEVC,EAFU,OAGUF,mBAAS,GAHnB,mBAGjBG,EAHiB,KAGNC,EAHM,OAIQJ,mBAAS,IAJjB,mBAIjBK,EAJiB,KAIPC,EAJO,KAMlBC,EAAUC,cA2DhB,OAhBAC,qBAAU,WACRC,MAAM,qCAAqCC,MAAK,SAAAC,GAC9CA,EAAIC,OAAOF,MAAK,SAAAC,GACd,IAAME,EAASF,EAAIG,KAAKd,OAZT,SAACe,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,GAQTC,CAAaV,GACbZ,EAASY,WAGZ,IAEHL,qBAAU,WACLR,EAAMiB,QACPZ,EAAYmB,MAAMxB,EAAME,GAAWuB,WAAWC,KAAK,OAEpD,CAACxB,EAAWF,IAGbA,EAAMiB,OACN,yBAAKU,UAAWC,IAAOC,WACrB,4BAAQC,QA/CS,WACnB,IAAMC,EAAc/B,EAAME,GACpB8B,EAAW,IAAIC,SAErBD,EAASE,OAAO,WAAY,gBAC5BF,EAASE,OAAO,WAAY,gBAC5BF,EAASE,OAAO,cAAeH,EAAYI,IAC3C/B,EAASgC,SAAQ,SAACC,EAAGC,GAAJ,OAAcN,EAASE,OAAT,gBAAyBI,EAAzB,WAAyCD,MAExE5B,MAAM,wCAAyC,CAC7C8B,OAAQ,OACRC,KAAMR,IACLtB,MAAK,SAAAC,GACNA,EAAIC,OAAOF,MAAK,SAAAC,GACdL,EAAQmC,KAAR,yBAA+B9B,EAAIG,KAAK4B,aAiCXf,UAAWC,IAAOe,UAAjD,YACA,4BAAQb,QAAS,kBAAM3B,EAAaD,EAAY,IAAIyB,UAAWC,IAAOgB,MAAtE,QAEExC,EAASyC,KAAI,SAACR,EAAGC,GAAJ,OACX,2BAAOQ,SAAU,SAACC,GAAD,OAhEH,SAACA,EAAGT,GACxB,IAAMU,EAAOD,EAAEE,OAAOC,OAAS,GAC/B7C,EACED,EAASyC,KAAI,SAACR,EAAGrB,GACf,OAAGsB,IAAUtB,EACJgC,EAEAX,MAyDiBc,CAAcJ,EAAGT,IAAQc,IAAKd,OAG1D,yBAAKe,IAAI,OAAOC,IAAKtD,EAAME,GAAWwC,OAExC,sC,yBC5ESa,EAAgB,WAAO,IAAD,EAELxD,oBAAS,GAFJ,mBAE1ByD,EAF0B,KAElBC,EAFkB,KAI3BC,EAAYC,yBACZrD,EAAUC,cACVqD,EAAWC,cACXnB,EAAM,IAAIoB,gBAAgBF,EAASG,QAAQC,IAAI,OAOrD,OACE,yBAAKrC,UAAWC,IAAOC,WACrB,4BAAQC,QAAS,kBAAMxB,EAAQmC,KAAK,MAAMd,UAAWC,IAAOqC,MAA5D,mBAGEvB,GAAO,yBAAKW,IAAI,OAAOC,IAAKZ,IAC9B,4BAAQZ,QAXK,WACf4B,EAAUQ,KAAKxB,GACfe,GAAU,IASmB9B,UAAWC,IAAOsC,MAC1CV,EAAS,eAAiB,eCpBtBW,EAAM,WACjB,OACE,6BACE,4CACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,U,OCRVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.9fe3535d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1Epup\",\"skip\":\"styles_skip__13et6\",\"generate\":\"styles_generate__3XDnR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2Nzfj\",\"copy\":\"styles_copy__3KP9d\",\"home\":\"styles_home__1hhuK\"};","import React, { useEffect, useState } from 'react';\nimport styles from './styles.module.css';\nimport { useHistory } from 'react-router-dom';\n\nexport const Meme = () => {\n\n  const [memes, setMemes] = useState([]);\n  const [memeIndex, setMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n\n  const history = useHistory();\n\n  const updateCaption = (e, index) => {\n    const text = e.target.value || '';\n    setCaptions(\n      captions.map((c, i) => {\n        if(index === i) {\n          return text;\n        } else {\n          return c;\n        }\n      })\n    );\n  };\n\n  const generateMeme = () => {\n    const currentMeme = memes[memeIndex];\n    const formData = new FormData();\n\n    formData.append('username', 'dindasukanta');\n    formData.append('password', 'dindasukanta');\n    formData.append('template_id', currentMeme.id);\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\n\n    fetch('https://api.imgflip.com/caption_image', {\n      method: 'POST',\n      body: formData\n    }).then(res => {\n      res.json().then(res => {\n        history.push(`/generated?url=${res.data.url}`);\n      });\n    });\n  };\n\n  const shuffleMemes = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes').then(res => {\n      res.json().then(res => {\n        const _memes = res.data.memes;\n        shuffleMemes(_memes);\n        setMemes(_memes);\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    if(memes.length) {\n      setCaptions(Array(memes[memeIndex].box_count).fill(''));\n    }\n  }, [memeIndex, memes]);\n\n  return(\n    memes.length ? \n    <div className={styles.container}>\n      <button onClick={generateMeme} className={styles.generate}>Generate</button>\n      <button onClick={() => setMemeIndex(memeIndex + 1)} className={styles.skip}>Skip</button>\n      {\n        captions.map((c, index) => (\n          <input onChange={(e) => updateCaption(e, index)} key={index} />\n        ))\n      }\n      <img alt='meme' src={memes[memeIndex].url} />\n    </div> : \n    <></>\n  );\n};\n","import React, { useState } from 'react';\nimport styles from './styles.module.css';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport const MemeGenerated = () => {\n\n  const [copied, setCopied] = useState(false);\n\n  const clipboard = useClipboard();\n  const history = useHistory();\n  const location = useLocation();\n  const url = new URLSearchParams(location.search).get('url');\n\n  const copyLink = () => {\n    clipboard.copy(url);\n    setCopied(true);\n  };\n\n  return(\n    <div className={styles.container}>\n      <button onClick={() => history.push('/')} className={styles.home}>\n        Make More Memes\n      </button>\n      { url && <img alt='meme' src={url} /> }\n      <button onClick={copyLink} className={styles.copy}>\n        {copied ? 'Link copied!' : 'Copy link'}\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Meme } from '../Meme/Meme';\nimport { Switch, Route } from 'react-router-dom';\nimport { MemeGenerated } from '../MemeGenerated/MemeGenerated';\n// import styles from './styles.module.css';\n\nexport const App = () => {\n  return (\n    <div>\n      <h1>Meme Creator</h1>\n      <Switch>\n        <Route exact path='/'>\n          <Meme />\n        </Route>\n        <Route path='/generated'>\n          <MemeGenerated />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App/App';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}